#include <Servo.h> //Import library for servo motor 
//Check if NodeMCU board was connected or not
#ifdef ESP8266
#include <BlynkSimpleEsp8266.h>
#else
#error "Board not found"
#endif
//Import Libraries 
#include <SPI.h>
#include <MFRC522.h>
#define BLYNK_PRINT Serial
#include <ESP8266WiFi.h>

#define SS_PIN 4  // sda pin define 
#define RST_PIN 2 //RST pin define
#define BUZZER 15 //buzzer pin
Servo myServo; //define servo name

MFRC522 mfrc522(RST_PIN, SS_PIN);  // Create MFRC522 instance.

char auth[] ="d4hpuwp31zWtgKMY2K5gFbGItSQgQzch"; //Authorization key from Blynk application
char ssid[] = "Hidden Virus_wlink"; //insert your SSID name
char pass[] = "#kathmandu7"; //Insert your SSID password



//define flag zero as default
SimpleTimer timer;
int fflag = 0; 
int eflag = 0; 
int jflag = 0; 
int kflag = 0; 

//Define terminal in Virtual pin 2 of Blynk application
WidgetTerminal terminal(V2);
 
void setup() {
        Serial.begin(9600);  // Initialize serial communications with the PC
        Blynk.begin(auth, ssid, pass); //Initialize connection with Blynk application
        SPI.begin(); 
        mfrc522.PCD_Init(); // Init MFRC522 card
        myServo.attach(5); //servo pin D1
        myServo.write(25); //servo start position
        pinMode(BUZZER, OUTPUT); // set buzzer as output
        noTone(BUZZER);
        timer.setInterval(1000L, iot_rfid);
}
 
void loop() {
        
  timer.run(); // Initiates SimpleTimer
  Blynk.run(); 
      
}
 
void iot_rfid()
{
 
        // Prepare key - all keys are set to FFFFFFFFFFFFh at chip delivery from the factory.
        MFRC522::MIFARE_Key key;
        for (byte i = 0; i < 6; i++) {
                key.keyByte[i] = 0xFF;
        }
        // Look for new cards
        if ( ! mfrc522.PICC_IsNewCardPresent()) {
                return;
        }
 
        // Select one of the cards
        if ( ! mfrc522.PICC_ReadCardSerial()) {
                return;
        }
        // Now a card is selected. The UID and SAK is in mfrc522.uid.
        
        // Dump UID
        Serial.print("Card UID:");
        for (byte i = 0; i < mfrc522.uid.size; i++) {
               Serial.print(mfrc522.uid.uidByte[i] < 0x10 ? " 0" : " ");
               Serial.print(mfrc522.uid.uidByte[i], DEC);
        } 
        Serial.println();
 
        // Dump PICC type
        byte piccType = mfrc522.PICC_GetType(mfrc522.uid.sak);

        if (        piccType != MFRC522::PICC_TYPE_MIFARE_MINI 
                &&        piccType != MFRC522::PICC_TYPE_MIFARE_1K
                &&        piccType != MFRC522::PICC_TYPE_MIFARE_4K) {
                //works with MIFARE Classic cards.");
                return;
        }
        // defining Cards here 
        //change the UID of the card/cards that you want to give access
        if(((mfrc522.uid.uidByte[0]==64)&&(mfrc522.uid.uidByte[1]==96)&&(mfrc522.uid.uidByte[2]==126)&&(mfrc522.uid.uidByte[3]==166))&&(fflag==1))
        {
        Serial.println("Sabin Chapagain");
        Blynk.virtualWrite(V2, "Sabin Chapagain has access." );
        Serial.println();
        tone(BUZZER, 500);
        delay(250);
        noTone(BUZZER);
        myServo.write(75);
        delay(3000);
        myServo.write(25);
        }
          
        else
        if(((mfrc522.uid.uidByte[0]==21)&&(mfrc522.uid.uidByte[1]==238)&&(mfrc522.uid.uidByte[2]==89)&&(mfrc522.uid.uidByte[3]==50))&&(eflag == 1))
        {
        Serial.println("Bhanu Bhandari"); 
        Blynk.virtualWrite(V2, "Bhanu Bhandari has access." );
        Serial.println();
        tone(BUZZER, 500);
        delay(250);
        noTone(BUZZER);
        myServo.write(75);
        delay(3000);
        myServo.write(25);
        }
        else
        if(((mfrc522.uid.uidByte[0]==253)&&(mfrc522.uid.uidByte[1]==87)&&(mfrc522.uid.uidByte[2]==78)&&(mfrc522.uid.uidByte[3]==99))&&(jflag == 1))
        {
         Serial.println("Unish Bhattarai");
         Blynk.virtualWrite(V2, "Unish Bhattarai has access." );
         Serial.println();
         tone(BUZZER, 500);
         delay(250);
         noTone(BUZZER);
         myServo.write(75);
         delay(3000);
         myServo.write(25);
         
        }
        else
        if(((mfrc522.uid.uidByte[0]==224)&&(mfrc522.uid.uidByte[1]==50)&&(mfrc522.uid.uidByte[2]==102)&&(mfrc522.uid.uidByte[3]==163))&&(kflag == 1))
        {
         Serial.println("Sabin Rimal");
         Blynk.virtualWrite(V2, "Sabin Rimal has access." );
         Serial.println();
         tone(BUZZER, 500);
         delay(250);
         noTone(BUZZER);
         myServo.write(75);
         delay(3000);
         myServo.write(25); 
        }
 
        else {
          Serial.println("unregistered user");
          Blynk.virtualWrite(V2, "Unregistered user Trying to Access your Door Lock ");
          Serial.println(" Access denied");
          tone(BUZZER, 300);
          delay(1700);
          noTone(BUZZER);  
        }
} 
// in Blynk app writes values to the Virtual Pin 3
BLYNK_WRITE(V3)
{
   fflag = param.asInt(); // assigning incoming value from pin V3 to a variable
}
// in Blynk app writes values to the Virtual Pin 4
BLYNK_WRITE(V4)
{
   eflag = param.asInt(); // assigning incoming value from pin V4 to a variable
}
// in Blynk app writes values to the Virtual Pin 5
BLYNK_WRITE(V5)
{
   jflag = param.asInt(); // assigning incoming value from pin V5 to a variable
}
// in Blynk app writes values to the Virtual Pin 6
BLYNK_WRITE(V6)
{
   kflag = param.asInt(); // assigning incoming value from pin V6 to a variable
}